from timeit import default_timer as timer

testarray = [4,-2,3,-7,5,2,-3,4,-8,6,-2,1]
testarray2 = [4,3,-10,3,-1,2,0,-3,5,7,-4,-8,-10,4,7,-30,-2,-6,4,7]
longtestarray = [337,343,214,-493,-326,-460,-237,-303,286,266,-359,-77,334,352,-412,358,-155,330,410,-415,-149,-140,363,265,480,411, 52,-342,-471,-256,-267,246,245,-207,-300,105,116,-171,-351,-35,-438, 57,  9,-452,-164,-348,-297,442,-224,315,-463, 38,100,-87,416,-406,-213,139,121, 70,-470,467,378,  0,319,-498,-368,279,-424,-254,225,-426,-170,136,-496,313,-135,242,-200,252,379, 76, 93,-102,-41,-84,-163, 54,-419,-314,-270, 20,-227,-341,-45,229, 17,339,-239,-437,-338,-305,-168, 29,-299,-61,-494,477,-373,366,110,-290,-131,-500,-216,-482,423,-13,-31,-157,-142,195,-335,-441,283,182,-459,434,241,-179,474,-376,307,-453,-323, 75, 11,-57,-188,-279,-258,372,-205,413,131,498,210,-486,-467,-59,304,  5,-67,213,451,303,124,199,-141,-107, -9,418,259,-38,360,-73, 71,-129,-328,336,-321,-181,446,227,430,-186,-439,-447,-442,-404,-21,264,461,-313,-126,445,-289,409,-399, 27,-472,255,-367,-361,-246, 88,-91,-217,249,203, 37,383,236,-113,-134,-350,-27,232,-456,437,435,-101, 98,-110,-120,133,-204,471,-413, 61,301,-166,-416,109,462,318,-34, 53,-358,459,243, 42,112,-344,-325,247,132,221, 28,376,-74,440,281,356, 41,194, 45,-349,-491,-17,161,-295,-81,-281,101,433,198,193,151,-451,-70,-480,211,178,-484, 12,235,113,-469,388,-39,-433,107,-253,-331,333,-66,-192,-18,-95,-90,-187,-249,155,463,-65,487, 99,384,-122,476, 36, 59,-47,392,-43,-431,250,-98,309,-428,345,256,165,-268,-381,465,-106, 97,426,391,146,297, 22,284,387,302,-375,344,-430,164,-172,381, 68,-324,496,-382,-62,-16,306,163,-259, -7,-389,145,237,-42,  4,152,-208,-377,422,-109,-238, 89,215,324,-161,-156,368,228,-378,-167,-86,137,-483,-195,-294,438,144,-99,-177,-435,-346,187,340, 24, 31,347,310,171,359,429,186,-420,-401,-445,271,-343,-29,207,-33,405,269,-197,-317,-309,-44,293,-477,-329,421,-418,-481,428,441,-28,-384,-202,209,-233,-333,-190, 62, 78,300,-123,-64,240,115,218,154,493,-159,-396,-116,444,454, 26,408,181,-352,-440,-225,-56,-405,-191,-388,166,412,-144,328,-93,172,369, -4,-383,190,483,-318,197,-411,126,-165,361, 87,-243,138,-10,282,-282,-184,-49,427,-96,-488,-24,204,-429,-223,-32,-357, 51,-209,-398,169,-103,-162,185,-63,-499,-288,-278,-53,-334,-222,  7,-263,-112,257,-14,-296,322,179, -6, 80,-269,-145,-194,-274,484,-273,398,491,-374,349,457,448, 19,-403, 34,355,125,224,327,-133,  8,-151,390,-392,394,176,-257,-347,-446,-79,-380,425,-147,-175,-390,-462,325,-448,-100,-322,278,316, 21,-143, 35,114,196,-60,-369,-261,314,223,-214,447, 33, -1,-92,220,-292,-201,-80,-82,-286,-372,276,373,417,-306,-203,272,280,-337,226,312,-492,-235, 40,-487,230,331,177,-409,153, 69,419,-468,212,-394,382,134,-218, 48,-332,-262,-206, 79, 81,473,499,406,-30,351,320,-124,420,184,-250, 49,-241,-76,-475, 95,389,275,290,  3,348,-121,102,-458,-189, 63,466,-417,-111,-150,-20,399,253,-234,469,-345,263,254,321,-245,-230,-302,-444,-474,288,-248,-40,-212,397, 25,-154,122,460,157,-421,380,244,-232,-160, 16,443,129,285,-183,-58, -8,341,  1,-228,217,-464, 91,464,222,-210,-78,-153,-327,332,-427,-391,-293,-242,-22,-37,-75,-287,403,-366, 94,118,291,-422,205,342,150,103,-434,-51, 90,147,-363,-386,-402,-174, 77,-454,-15,294,-340,-310,470,120,-255,160,-304, 86,395,-231,-26,296,-272,-252,323, 30,261,119,424,371,305,-308,-136,233,156,258, 23,274,287,494, 32,-497,-443,140,492,432, 55,231,-260,500,188, 58,-354,-178,-400,335,364, 65,-410,-276,-455,-130,357,404,-385, 74,-127,370,-393, 72,-365,326,262,168,162,-108,-355,414, 64,-315,-229,-495,-307,-114, 66,-473,402,375,-48,449,-83,354, 84,436,238,-236,481,-69,-284,353,415,-478,-72,-23,-169,183,-364,-94,-125,-397,-71,439,  2,374,141,431, 92,-52, 60,267,-137,365,-320,-68,-25,-490,-146,-312,-275,-407,-408,-436,167, 18,-158,362,117,158,-479,-219,-264,455,201,219,159,346,482,-449,-244, 13,452,495,216,-88,400,-330,393,-148, 43,-139,-220,486,-12,-36,-466,-104,488,111,458,-450,-240,-132,148,385,-19,-173,-115,308,-265, 73,-185,-298,478, -5,377,128,104,479, -2,-118,-251,200,295,175, 67, 82, 14,-152,-414,472,-226,-387,485,401, 85,174,-85,106, 50,-277,-353,-198,-247,-180,143,-285,-291,-89,260,456,270,-316,130,489,-266, 10,234,-485,273,208,289,-432, 46,317, 47,311,468,149,142,-423,277,-182,-54,-55,173,453,450,-283, -3,202,135,-356,-457,-395,123,-50,-465,-119,-379,-461,292,-339,180,268,475,239,-489,497, 39,-105,248,407,490,-360, 56,-425,-336,-128,-280,338,299,-476,-215,396,298,350,  6,-117,-97,367,386,-221,-46,-193,206,192, 96, 15,-199,-11,189,329,-271,-311, 44,-211,-301,108, 83,-319,191,-176,251,-138,127,-371,-370,-196,-362,170]

def maxSum(arr):
    sumarray = []
    for i in arr:
        sumarray.append(sum(i))
    maxsum = max(sumarray)
    return (maxsum)


def bruteforce_max(arr):
    allarray = []
    sizeofarray = len(arr)

    for i in range(sizeofarray):

        for j in range(1, sizeofarray + 1):

            if i + j <= sizeofarray:
                allarray.append(arr[i:i + j])

    # maxsublistindex = maxSum(allarray)[1]
    # maxsum = maxSum(allarray)[0]

    # return ('Max Subarray = ' + str(allarray[maxsublistindex]),
    #         'Max Sum = ' + str(maxsum))
    return allarray







def divmethod(arr):
    lefthalf = arr[:len(arr)//2]
    righthalf = arr[len(arr)//2:]
    crossover = []

    maxsumleft = maxSum(bruteforce_max(lefthalf))
    maxsumright = maxSum(bruteforce_max(righthalf))
    
    i=-1    #increment by -1 to keep moving left in left half
    j=0     #increment by +1 to keep moving right in right half
    k=0     #crossover array index

    while i>=-1*len(lefthalf) and j<=len(righthalf)-1:
        if lefthalf[i] > righthalf[j]:
            crossover.append(lefthalf[i])
            i-=1
            k+=1
        
        else:
            crossover.append(righthalf[j])
            j+=1
            k+=1
    
        while i>-1*len(lefthalf) and j==len(righthalf):
            crossover.append(lefthalf[i])
            i-=1
            k+=1
            
        while j<len(righthalf) and i==-1*len(lefthalf):
            crossover.append(righthalf[j])
            j+=1
            k+=1
   
    maxsummiddle = maxSum(bruteforce_max(crossover))
    threemaxsums = [maxsumleft,maxsumright,maxsummiddle]
    return max(threemaxsums)
    
start = timer()
print(maxSum(bruteforce_max(testarray2)))
end = timer()
print("bruteforce time = " + str(end - start))

start = timer()
print(divmethod(testarray2))
end = timer()
print("divide and conquer time = " + str(end - start))



